Hi and welcome to my project! This should provide all the tools necessary to completely scrape the NCAA's website for
division 1 men's college basketball. Any large projects using this library should add a 2-second delay between these
repositories' functions to not overload the server and get temporarily ip banned. All functions return Dataframes from
Pandas library. For help with dataframes consult https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html



Functions:

scrape_day(date, conference_id='0', tournament_id=''):
    Using a date in the format of mm/dd/yyyy as well as optional filter

     ids that can be found in variables.py, this will
    return a dataframe of every score on the day that fits the filers, some setting information, and the ID for the game
    and opponents. This is where ids need to be sourced from for now. The Home_id and Away_id is the id needed to
    scrape the schedule from that year. The game_id can be used to scrape the play by play or the box score.


scrape_game(game_id):
    This will scrape the play by play data of the given game which includes shot data, players on court, and possession
    counters. For now this feature can only be used on games after the start of the 2019-2020 season and the ncaa
    tournament games of 2019.


def scrape_box(game_id):
    This will scrape the box score which will return player and team stats for the game, as well as game information,
    refs, and ids for players and team schedule. If a team does not have an ID they are not NCAA affiliated, and thus
    the player_ids will not work for that team.


def scrape_player(player_id):
    Scrapes the id of player for a given season, returning opponents, scores, and stats, and is the source of coach IDs.



def scrape_schedule(schedule_id):
    Scrapes the schedule of a team giving opponents, scores, and extra game info. ALso returns team_ids for historical
    scraping in scrape_team/


def scrape_team(team_id):
    Scrapes a teams historical record of the team including W-L, year, coach, coach ids, and season ids.


def scrape_coach(coach_id):
    Scrapes the history of a coach, their win loss records and teams coached as well as the team schedule ids for those
    years.
